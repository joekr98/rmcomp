{"version":3,"sources":["components/Slide.js","components/Slideshow.js","components/SearchBox.js","containers/App.js","serviceWorker.js","index.js"],"names":["Slide","_ref","name","image","isAlive","species","origin","location","react_default","a","createElement","className","src","alt","Slideshow","characters","map","character","i","components_Slide","key","status","SearchBox","searchfield","searchChange","type","placeholder","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","onPageChange","page","state","_this2","fetch","then","response","json","results","catch","_this3","concat","console","log","_this$state","filteredCharacters","filter","toLowerCase","includes","min","max","components_SearchBox","components_Slideshow","Component","Boolean","window","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3860f6cd.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Slide = ({ name, image, isAlive, species, origin, location }) => {\r\n    return (\r\n        <div className=\"ba dib b--blue br3 pa2 bg-yellow ma3 bw1 shadow-3 tc bg-animate hover-bg-light-green slide\">\r\n            <img src={image} alt={name} className=\"img-slide\"></img>\r\n            <h1 className=\"f4\">{name}</h1>\r\n            <p>Status: {isAlive}</p>\r\n            <p>Species: {species}</p>\r\n            <p>Origin: {origin}</p>\r\n            <p>Location: {location}</p>\r\n        </div>\r\n    )\r\n    \r\n    \r\n}\r\n\r\nexport default Slide;","import React from 'react';\r\nimport Slide from './Slide';\r\n\r\nconst Slideshow = ({ characters }) => {\r\n    return (\r\n        <div>\r\n            {\r\n                characters.map((character, i) => {\r\n                    return <Slide key={i} name={characters[i].name} image={characters[i].image} isAlive={characters[i].status} species={characters[i].species} origin={characters[i].origin.name} location={characters[i].location.name}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Slideshow;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input className=\"pa3 ba b--gold bg-light-yellow ma3\" type=\"search\" placeholder=\"character name\" onChange={searchChange}/>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default SearchBox;","import React, { Component } from 'react';\nimport './App.css';\nimport Slideshow from '../components/Slideshow'\nimport SearchBox from '../components/SearchBox';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      characters: [],\n      searchfield: '',\n      page: 1\n    }\n  }\n\n  componentDidMount() {\n    fetch(`https://rickandmortyapi.com/api/character/`)\n      .then(response => { return response.json(); })\n      .then(results => { this.setState({ characters: results.results }) })\n      .catch(() => <h1 className=\"title\">Not available at the moment</h1>)\n  }\n\n  componentWillUpdate() {\n    fetch(`https://rickandmortyapi.com/api/character/?page=${this.state.page}`)\n    .then(response => { return response.json(); })\n    .then(results => { this.setState({ characters: results.results }) })\n      .catch(() => <h1 className=\"title\">Not available at the moment</h1>)\n    \n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  }\n\n  onPageChange = (event) => {\n    this.setState({ page: event.target.value });\n  }\n\n  render() {\n    console.log(this.state);\n    const { characters, searchfield } = this.state;\n    const filteredCharacters = characters.filter(character => {\n      return character.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n    return(\n      <div className=\"tc\">\n        <img src=\"https://i.ya-webdesign.com/images/rick-and-morty-logo-png-1.png\" alt=\"logo\" className=\"logo ma4\"></img>\n        <h1 className=\"tc pa3 ma2 title\">CHARACTER COMPENDIUM</h1>\n        <p className=\"tc pa2 ma2 page-selec\">Pick a page from 1 to 20</p>\n        <input type=\"number\" name=\"quantity\" min=\"1\" max=\"20\" onChange={this.onPageChange}></input>\n        <SearchBox searchChange = {this.onSearchChange}/>\n        <Slideshow characters = {filteredCharacters}/>\n      </div>\n    )\n  \n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}